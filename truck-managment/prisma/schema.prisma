generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  NEW_PROVIDER
  NEW_TRUCK
  NEW_ENTRY
  NEW_LOAD
  NEW_INVENTORY
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      String     @default("user")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  providers Provider[]
  notifications Notification[]
  preferences UserNotificationPreferences?
}

model Provider {
  id            String    @id @default(cuid())
  name          String    @unique
  responsibleId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entries       Entry[]
  loads         Load[]
  contacts      Contact[]
  inventories   Inventory[]
  responsible   User?     @relation(fields: [responsibleId], references: [id])
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Truck {
  id           String   @id @default(cuid())
  licensePlate String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  entries      Entry[]
  loads        Load[]
}

model Entry {
  id              String    @id @default(cuid())
  providerId      String
  truckId         String
  arrivalTime     DateTime?
  departureTime   DateTime?
  week            Int?
  month           Int?
  durationMinutes Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        Provider  @relation(fields: [providerId], references: [id])
  truck           Truck     @relation(fields: [truckId], references: [id])
  inventories     Inventory[]

  @@index([week])
  @@index([month])
  @@index([providerId])
}

model Load {
  id              String    @id @default(cuid())
  providerId      String
  truckId         String
  arrivalTime     DateTime?
  departureTime   DateTime?
  week            Int?
  month           Int?
  durationMinutes Int?
  quantity        String?
  container       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        Provider  @relation(fields: [providerId], references: [id])
  truck           Truck     @relation(fields: [truckId], references: [id])

  @@index([week])
  @@index([month])
  @@index([providerId])
}

model Warehouse {
  id          String     @id @default(cuid())
  name        String     @unique
  address     String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  locations   Location[]
}

model Location {
  id          String     @id @default(cuid())
  warehouseId String
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventories Inventory[]
}

model Inventory {
  id         String    @id @default(cuid())
  entryId    String?
  providerId String?
  locationId String
  quantity   Int       @default(1)
  status     String    @default("stored")
  trackingNumbers String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  entry      Entry?    @relation(fields: [entryId], references: [id])
  provider   Provider? @relation(fields: [providerId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  userId    String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserNotificationPreferences {
  userId       String @id
  newProvider  Boolean @default(true)
  newTruck     Boolean @default(true)
  newEntry     Boolean @default(true)
  newLoad      Boolean @default(true)
  newInventory Boolean @default(true)
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
