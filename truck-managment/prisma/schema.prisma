generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  NEW_PROVIDER
  NEW_TRUCK
  NEW_ENTRY
  NEW_LOAD
  NEW_INVENTORY
  NEW_ZONE
  EDIT_ZONE
  ASSIGN_PROVIDER
  UNASSIGN_PROVIDER
  NEW_PRE_ALERTA
  NEW_PRE_RUTEO
  VERIFICATION_COMPLETED
  NEW_SHIPMENT
}

enum ShipmentStatus {
  PRE_ALERTA
  PRE_RUTEO
  VERIFICACION
  FINALIZADO
}

enum VerificationStatus {
  OK
  SOBRANTE
  FUERA_COBERTURA
  PREVIO
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      String     @default("user")
  providerId String?
  vmsProvider Provider? @relation("VMSUsers", fields: [providerId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  providers Provider[]
  notifications Notification[]
  preferences UserNotificationPreferences?
  shipments Shipment[]
  scannedPackages ScannedPackage[]
}

model Provider {
  id            String    @id @default(cuid())
  name          String    @unique
  responsibleId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entries       Entry[]
  loads         Load[]
  contacts      Contact[]
  inventories   Inventory[]
  responsible   User?     @relation(fields: [responsibleId], references: [id])
  vmsUsers      User[]    @relation("VMSUsers")
  coverages     ProviderCoverage[]
  packagesFrom  PackageMovement[] @relation("FromProvider")
  packagesTo    PackageMovement[] @relation("ToProvider")
  currentPackages Package[]
  shipments     Shipment[]
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Truck {
  id           String   @id @default(cuid())
  licensePlate String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  entries      Entry[]
  loads        Load[]
}

model Entry {
  id              String    @id @default(cuid())
  providerId      String
  truckId         String
  arrivalTime     DateTime?
  departureTime   DateTime?
  week            Int?
  month           Int?
  durationMinutes Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        Provider  @relation(fields: [providerId], references: [id])
  truck           Truck     @relation(fields: [truckId], references: [id])
  inventories     Inventory[]

  @@index([week])
  @@index([month])
  @@index([providerId])
}

model Load {
  id              String    @id @default(cuid())
  providerId      String
  truckId         String
  arrivalTime     DateTime?
  departureTime   DateTime?
  week            Int?
  month           Int?
  durationMinutes Int?
  quantity        String?
  container       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        Provider  @relation(fields: [providerId], references: [id])
  truck           Truck     @relation(fields: [truckId], references: [id])

  @@index([week])
  @@index([month])
  @@index([providerId])
}

model Warehouse {
  id          String     @id @default(cuid())
  name        String     @unique
  address     String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  locations   Location[]
}

model Location {
  id          String     @id @default(cuid())
  warehouseId String
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventories Inventory[]
  movementsFrom PackageMovement[] @relation("FromLocation")
  movementsTo   PackageMovement[] @relation("ToLocation")
  currentPackages Package[]
}

model Inventory {
  id         String    @id @default(cuid())
  entryId    String?
  providerId String?
  locationId String
  quantity   Int       @default(1)
  status     String    @default("stored")
  trackingNumbers String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  entry      Entry?    @relation(fields: [entryId], references: [id])
  provider   Provider? @relation(fields: [providerId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])
  packages   Package[]
}

model Package {
  id              String           @id @default(cuid())
  inventoryId     String
  trackingNumber  String           @unique
  currentProviderId String?
  currentLocationId String
  status          PackageStatus    @default(ingresado)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inventory       Inventory        @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  currentProvider Provider?        @relation(fields: [currentProviderId], references: [id])
  currentLocation Location         @relation(fields: [currentLocationId], references: [id])
  movements       PackageMovement[]

  @@index([trackingNumber])
}

model PackageMovement {
  id             String         @id @default(cuid())
  packageId      String
  fromProviderId String?
  toProviderId   String?
  fromLocationId String?
  toLocationId   String?
  action         MovementAction
  timestamp      DateTime       @default(now())
  notes          String?
  package        Package        @relation(fields: [packageId], references: [id], onDelete: Cascade)
  fromProvider   Provider?      @relation("FromProvider", fields: [fromProviderId], references: [id])
  toProvider     Provider?      @relation("ToProvider", fields: [toProviderId], references: [id])
  fromLocation   Location?      @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocation     Location?      @relation("ToLocation", fields: [toLocationId], references: [id])
}

enum PackageStatus {
  ingresado
  almacenado
  en_traspaso
  entregado
}

enum MovementAction {
  ingreso
  traspaso
  salida
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  userId    String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserNotificationPreferences {
  userId       String @id
  newProvider  Boolean @default(false)
  newTruck     Boolean @default(false)
  newEntry     Boolean @default(false)
  newLoad      Boolean @default(false)
  newInventory Boolean @default(false)
  newZone      Boolean @default(false)
  editZone     Boolean @default(false)
  assignProvider Boolean @default(false)
  unassignProvider Boolean @default(false)
  newShipment  Boolean @default(false)
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Zone {
  id          String   @id @default(cuid())
  postalCodes String[]
  province    String
  department  String
  locality    String
  type        String
  geometry    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coverages   ProviderCoverage[]
}

model ProviderCoverage {
  id         String   @id @default(cuid())
  providerId String
  zoneId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id])
  zone       Zone     @relation(fields: [zoneId], references: [id])
}

model WikiCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pages       WikiPage[]

  @@map("wiki_categories")
}

model WikiPage {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  categoryId  String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    WikiCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("wiki_pages")
}

// VMS Models
model Shipment {
  id                String   @id @default(cuid())
  providerId        String
  provider          Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  shipmentDate      DateTime @default(now())
  status            ShipmentStatus @default(PRE_ALERTA)
  createdById       String
  createdBy         User     @relation(fields: [createdById], references: [id])
  
  preAlertas        PreAlerta[]
  preRuteos         PreRuteo[]
  scannedPackages   ScannedPackage[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  finalizedAt       DateTime?
  
  @@index([providerId])
  @@index([status])
  @@index([shipmentDate])
}

model PreAlerta {
  id                      String   @id @default(cuid())
  shipmentId              String
  shipment                Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  
  client                  String
  country                 String
  trackingNumber          String
  weight                  Float
  value                   Float
  buyerNormalizedId       String?
  buyer                   String
  buyerAddress1           String
  buyerAddress1Number     String?
  buyerAddress2           String?
  buyerCity               String
  buyerState              String
  buyerLocation           String?
  buyerZip                String
  buyerPhone              String?
  buyerEmail              String?
  
  verified                Boolean  @default(false)
  verificationStatus      VerificationStatus?
  scannedPackage          ScannedPackage?
  
  createdAt               DateTime @default(now())
  
  @@index([shipmentId])
  @@index([trackingNumber])
  @@unique([shipmentId, trackingNumber])
}

model PreRuteo {
  id                String   @id @default(cuid())
  shipmentId        String
  shipment          Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  
  codigoCliente     String
  razonSocial       String
  domicilio         String
  tipoCliente       String
  fechaReparto      DateTime
  codigoReparto     String
  maquina           String?
  chofer            String?
  fechaPedido       DateTime
  codigoPedido      String
  ventanaHoraria    String?
  arribo            DateTime?
  partida           DateTime?
  pesoKg            Float?
  volumenM3         Float?
  dinero            Float?
  ruta              String?
  
  verified          Boolean  @default(false)
  verificationStatus VerificationStatus?
  scannedPackage    ScannedPackage?
  
  createdAt         DateTime @default(now())
  
  @@index([shipmentId])
  @@index([codigoPedido])
  @@unique([shipmentId, codigoPedido])
}

model ScannedPackage {
  id                String   @id @default(cuid())
  shipmentId        String
  shipment          Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  
  trackingNumber    String
  scanTimestamp     DateTime @default(now())
  scannedBy         String
  scannedByUser     User     @relation(fields: [scannedBy], references: [id])
  
  preAlertaId       String?  @unique
  preAlerta         PreAlerta? @relation(fields: [preAlertaId], references: [id])
  preRuteoId        String?  @unique
  preRuteo          PreRuteo? @relation(fields: [preRuteoId], references: [id])
  
  status            VerificationStatus
  
  createdAt         DateTime @default(now())
  
  @@unique([shipmentId, trackingNumber])
  @@index([shipmentId])
  @@index([trackingNumber])
  @@index([status])
}

model Label {
  id            String   @id @default(cuid())
  barcode       String   @unique
  providerName  String
  issueDate     DateTime @default(now())
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([providerName])
  @@index([issueDate])
}
